  graph.cpp
c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.10.25017\include\algorithm(443): error C2679: binary '=': no operator found which takes a right-hand operand of type 'std::unique_ptr<Edge<VertexValue,EdgeValue>,std::default_delete<_Ty>>' (or there is no acceptable conversion)
          with
          [
              VertexValue=int,
              EdgeValue=double,
              _Ty=Edge<int,double>
          ]
  c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.10.25017\include\xutility(3739): note: could be 'std::back_insert_iterator<std::vector<Edge<VertexValue,EdgeValue> *,std::allocator<_Ty>>> &std::back_insert_iterator<std::vector<_Ty,std::allocator<_Ty>>>::operator =(std::back_insert_iterator<std::vector<_Ty,std::allocator<_Ty>>> &&)'
          with
          [
              VertexValue=int,
              EdgeValue=double,
              _Ty=Edge<int,double> *
          ]
  c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.10.25017\include\xutility(3739): note: or       'std::back_insert_iterator<std::vector<Edge<VertexValue,EdgeValue> *,std::allocator<_Ty>>> &std::back_insert_iterator<std::vector<_Ty,std::allocator<_Ty>>>::operator =(const std::back_insert_iterator<std::vector<_Ty,std::allocator<_Ty>>> &)'
          with
          [
              VertexValue=int,
              EdgeValue=double,
              _Ty=Edge<int,double> *
          ]
  c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.10.25017\include\xutility(3716): note: or       'std::back_insert_iterator<std::vector<Edge<VertexValue,EdgeValue> *,std::allocator<_Ty>>> &std::back_insert_iterator<std::vector<_Ty,std::allocator<_Ty>>>::operator =(Edge<VertexValue,EdgeValue> *&&)'
          with
          [
              VertexValue=int,
              EdgeValue=double,
              _Ty=Edge<int,double> *
          ]
  c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.10.25017\include\xutility(3710): note: or       'std::back_insert_iterator<std::vector<Edge<VertexValue,EdgeValue> *,std::allocator<_Ty>>> &std::back_insert_iterator<std::vector<_Ty,std::allocator<_Ty>>>::operator =(Edge<VertexValue,EdgeValue> *const &)'
          with
          [
              VertexValue=int,
              EdgeValue=double,
              _Ty=Edge<int,double> *
          ]
  c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.10.25017\include\algorithm(443): note: while trying to match the argument list '(std::back_insert_iterator<std::vector<Edge<VertexValue,EdgeValue> *,std::allocator<_Ty>>>, std::unique_ptr<Edge<VertexValue,EdgeValue>,std::default_delete<_Ty>>)'
          with
          [
              VertexValue=int,
              EdgeValue=double,
              _Ty=Edge<int,double> *
          ]
          and
          [
              VertexValue=int,
              EdgeValue=double,
              _Ty=Edge<int,double>
          ]
  c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.10.25017\include\algorithm(458): note: see reference to function template instantiation '_OutIt std::_Copy_if_unchecked<std::unique_ptr<Edge<VertexValue,EdgeValue>,std::default_delete<_Ty>>*,_Iter,_Pr>(_InIt,_InIt,_OutIt,_Pr &)' being compiled
          with
          [
              _OutIt=std::back_insert_iterator<std::vector<Edge<int,double> *,std::allocator<Edge<int,double> *>>>,
              VertexValue=int,
              EdgeValue=double,
              _Ty=Edge<int,double>,
              _Iter=std::back_insert_iterator<std::vector<Edge<int,double> *,std::allocator<Edge<int,double> *>>>,
              _Pr=Graph<int,double>::edges_from::<lambda_7f030ec3039b13c12edbe2dd76e854d2>,
              _InIt=std::unique_ptr<Edge<int,double>,std::default_delete<Edge<int,double>>> *
          ]
  c:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.10.25017\include\algorithm(468): note: see reference to function template instantiation '_OutIt std::_Copy_if_no_deprecate<_InIt,_OutIt,_Pr>(_InIt,_InIt,_OutIt,_Pr &)' being compiled
          with
          [
              _OutIt=std::back_insert_iterator<std::vector<Edge<int,double> *,std::allocator<Edge<int,double> *>>>,
              _InIt=std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::unique_ptr<Edge<int,double>,std::default_delete<Edge<int,double>>>>>>,
              _Pr=Graph<int,double>::edges_from::<lambda_7f030ec3039b13c12edbe2dd76e854d2>
          ]
  d:\data\git\generalgraph\generalgraph\generalgraph\graph.h(47): note: see reference to function template instantiation '_OutIt std::copy_if<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::unique_ptr<Edge<VertexValue,EdgeValue>,std::default_delete<_Ty>>>>>,std::back_insert_iterator<std::vector<Edge<VertexValue,EdgeValue> *,std::allocator<Edge<VertexValue,EdgeValue>*>>>,Graph<VertexValue,EdgeValue>::edges_from::<lambda_7f030ec3039b13c12edbe2dd76e854d2>>(_InIt,_InIt,_OutIt,_Pr)' being compiled
          with
          [
              _OutIt=std::back_insert_iterator<std::vector<Edge<int,double> *,std::allocator<Edge<int,double> *>>>,
              VertexValue=int,
              EdgeValue=double,
              _Ty=Edge<int,double>,
              _InIt=std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::unique_ptr<Edge<int,double>,std::default_delete<Edge<int,double>>>>>>,
              _Pr=Graph<int,double>::edges_from::<lambda_7f030ec3039b13c12edbe2dd76e854d2>
          ]
  d:\data\git\generalgraph\generalgraph\generalgraph\graph.h(45): note: while compiling class template member function 'std::vector<Edge<VertexValue,EdgeValue> *,std::allocator<_Ty>> Graph<VertexValue,EdgeValue>::edges_from(Vertex<VertexValue> *)'
          with
          [
              VertexValue=int,
              EdgeValue=double,
              _Ty=Edge<int,double> *
          ]
  d:\data\git\generalgraph\generalgraph\generalgraph\graph.cpp(21): note: see reference to function template instantiation 'std::vector<Edge<VertexValue,EdgeValue> *,std::allocator<_Ty>> Graph<VertexValue,EdgeValue>::edges_from(Vertex<VertexValue> *)' being compiled
          with
          [
              VertexValue=int,
              EdgeValue=double,
              _Ty=Edge<int,double> *
          ]
  d:\data\git\generalgraph\generalgraph\generalgraph\graph.cpp(7): note: see reference to class template instantiation 'Graph<int,double>' being compiled
